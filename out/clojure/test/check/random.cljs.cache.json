["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:imports",null,"~:requires",["^ ","~$doubles","~$clojure.test.check.random.doubles","^>","^>","~$longs","~$clojure.test.check.random.longs","^@","^@"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^@","^6","^@","^7","^@","~$*","^@","^8","^@","~$+","^@"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^9","~$clojure.test.check.random/mix-gamma-const-1","~:file","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","~:line",71,"~:column",1,"~:end-line",71,"~:end-column",33,"~:private",true,"~:meta",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",71,"^H",16,"^I",71,"^J",33,"^K",true],"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",123,"^H",7,"^I",123,"^J",39,"~:arglists",["~#list",["~$quote",["^R",[["~$seed"]]]]]],"^9","~$clojure.test.check.random/make-java-util-splittable-random","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",39,"~:method-params",["^R",[["^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^H",1,"~:variadic?",false,"^G",123,"~:ret-tag","~$clojure.test.check.random/JavaUtilSplittableRandom","^I",123,"~:max-fixed-arity",1,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T"]]]]]],"~$rand-long",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",20,"^H",4,"^I",20,"^J",13,"~:protocol","~$clojure.test.check.random/IRandom","~:doc","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^Q",["^R",["^S",["^R",[["~$rng"]]]]]],"^13","^14","^9","~$clojure.test.check.random/rand-long","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",13,"^V",["^R",[["^16"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",19,"^Z","^N","^I",20,"^10",1,"^11",true,"^Q",["^R",["^S",["^R",[["^16"]]]]],"^15","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",62,"^H",17,"^I",62,"^J",23,"^K",true,"^Q",["^R",["^S",["^R",[["~$n"]]]]]],"^K",true,"^9","~$clojure.test.check.random/mix-64","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",23,"^V",["^R",[["~$n"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",62,"^Z","^N","^I",62,"^10",1,"^11",true,"^Q",["^R",["^S",["^R",[["~$n"]]]]]],"~$golden-gamma",["^ ","^9","~$clojure.test.check.random/golden-gamma","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",120,"^H",1,"^I",120,"^J",28,"^K",true,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",120,"^H",16,"^I",120,"^J",28,"^K",true],"^M","^N"],"~$mix-gamma-const-2",["^ ","^9","~$clojure.test.check.random/mix-gamma-const-2","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",72,"^H",1,"^I",72,"^J",33,"^K",true,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",72,"^H",16,"^I",72,"^J",33,"^K",true],"^M","^N"],"~$mix-64-const-2",["^ ","^9","~$clojure.test.check.random/mix-64-const-2","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",60,"^H",1,"^I",60,"^J",30,"^K",true,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",60,"^H",16,"^I",60,"^J",30,"^K",true],"^M","^N"],"~$bxoubsr",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",54,"^H",17,"^I",54,"^J",24,"^K",true,"^Q",["^R",["^S",["^R",[["~$x","~$n"]]]]],"^15","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^K",true,"^9","~$clojure.test.check.random/bxoubsr","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",24,"^V",["^R",[["~$x","~$n"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",54,"^Z","^N","^I",54,"^10",2,"^11",true,"^Q",["^R",["^S",["^R",[["~$x","~$n"]]]]],"^15","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",140,"^H",7,"^I",140,"^J",18,"^Q",["^R",["^S",["^R",[[],["^T"]]]]],"^15","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^Y",false,"~:fixed-arity",1,"^10",1,"^V",[[],["^T"]],"^Q",["^R",[[],["^T"]]],"^X",["^R",[null,null]]]],"^9","~$clojure.test.check.random/make-random","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",18,"^1C",["^ ","^Y",false,"^1D",1,"^10",1,"^V",[[],["^T"]],"^Q",["^R",[[],["^T"]]],"^X",["^R",[null,null]]],"^V",[[],["^T"]],"^W",null,"^1D",1,"^X",["^R",[null,null]],"^H",1,"^Y",false,"~:methods",[["^ ","^1D",0,"^Y",false,"^M","^N"],["^ ","^1D",1,"^Y",false,"^M","^["]],"^G",140,"^I",140,"^10",1,"^11",true,"^Q",["^R",[[],["^T"]]],"^15","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",75,"^H",17,"^I",75,"^J",26,"^K",true,"^Q",["^R",["^S",["^R",[["~$n"]]]]]],"^K",true,"^9","~$clojure.test.check.random/mix-gamma","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",26,"^V",["^R",[["~$n"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",75,"^Z","^N","^I",75,"^10",1,"^11",true,"^Q",["^R",["^S",["^R",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^9","~$clojure.test.check.random/mix-gamma-const-3","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",73,"^H",1,"^I",73,"^J",33,"^K",true,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",73,"^H",16,"^I",73,"^J",33,"^K",true],"^M","^N"],"~$split-n",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",37,"^H",4,"^I",37,"^J",11,"^13","^14","^15","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^Q",["^R",["^S",["^R",[["^16","~$n"]]]]]],"^13","^14","^9","~$clojure.test.check.random/split-n","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",11,"^V",["^R",[["^16","~$n"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",19,"^Z","^N","^I",37,"^10",2,"^11",true,"^Q",["^R",["^S",["^R",[["^16","~$n"]]]]],"^15","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^9","~$clojure.test.check.random/next-rng","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",130,"^H",1,"^I",130,"^J",24,"^K",true,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",130,"^H",16,"^I",130,"^J",24,"^K",true],"^M","~$function"],"~$hex-long",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",49,"^H",17,"^I",49,"^J",25,"^K",true,"^Q",["^R",["^S",["^R",[["~$s"]]]]],"^15","Helper for defining constants."],"^K",true,"^9","~$clojure.test.check.random/hex-long","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",25,"^V",["^R",[["~$s"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",49,"^Z","^N","^I",49,"^10",1,"^11",true,"^Q",["^R",["^S",["^R",[["~$s"]]]]],"^15","Helper for defining constants."],"~$rand-double",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",25,"^H",4,"^I",25,"^J",15,"^13","^14","^15","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^Q",["^R",["^S",["^R",[["^16"]]]]]],"^13","^14","^9","~$clojure.test.check.random/rand-double","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",15,"^V",["^R",[["^16"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",19,"^Z","^N","^I",25,"^10",1,"^11",true,"^Q",["^R",["^S",["^R",[["^16"]]]]],"^15","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^9","~$clojure.test.check.random/mix-64-const-1","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",59,"^H",1,"^I",59,"^J",30,"^K",true,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",59,"^H",16,"^I",59,"^J",30,"^K",true],"^M","^N"],"~$split",["^ ","^P",null,"^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",31,"^H",4,"^I",31,"^J",9,"^13","^14","^15","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^Q",["^R",["^S",["^R",[["^16"]]]]]],"^13","^14","^9","~$clojure.test.check.random/split","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",9,"^V",["^R",[["^16"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^G",19,"^Z","^N","^I",31,"^10",1,"^11",true,"^Q",["^R",["^S",["^R",[["^16"]]]]],"^15","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^4",["^14"]],"^9","^[","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",34,"~:type",true,"^H",10,"^G",91,"~:record",false,"^I",91,"^M","^1O","~:skip-protocol-flag",null],"~$IRandom",["^ ","^L",["^ ","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^G",19,"^H",14,"^I",19,"^J",21,"~:protocol-symbol",true,"~:jsdoc",["^R",["@interface"]],"~:protocol-info",["^ ","^1F",["^ ","^12",[["^16"]],"^1R",[["^16"]],"^1V",[["^16"]],"^1K",[["^16","~$n"]]]],"~:sigs",["^ ","~:rand-long",["^ ","^9","^12","^Q",["^R",[["^16"]]],"^15","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~:rand-double",["^ ","^9","^1R","^Q",["^R",[["^16"]]],"^15","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~:split",["^ ","^9","^1V","^Q",["^R",[["^16"]]],"^15","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~:split-n",["^ ","^9","^1K","^Q",["^R",[["^16","~$n"]]],"^15","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"]]],"^23",true,"^9","^14","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",21,"^H",1,"^G",19,"^25",["^ ","^1F",["^ ","^12",[["^16"]],"^1R",[["^16"]],"^1V",[["^16"]],"^1K",[["^16","~$n"]]]],"~:info",null,"^I",19,"^M","^N","^26",["^ ","^27",["^ ","^9","^12","^Q",["^R",[["^16"]]],"^15","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"^28",["^ ","^9","^1R","^Q",["^R",[["^16"]]],"^15","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"^29",["^ ","^9","^1V","^Q",["^R",[["^16"]]],"^15","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"^2:",["^ ","^9","^1K","^Q",["^R",[["^16","~$n"]]],"^15","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"]],"~:impls",["^4",["^["]],"^24",["^R",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^P",null,"^L",["^ ","^1Z",["^4",["^14"]],"^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",34,"^H",10,"~:factory","~:positional","^G",91,"^I",91,"^Q",["^R",["^S",["^R",[["~$gamma","~$state"]]]]],"^21",null,"^15","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."],"^1Z",["^4",["^14"]],"^9","~$clojure.test.check.random/->JavaUtilSplittableRandom","^F","/home/uer/.cljs/.aot_cache/1.10.773/36DBED9/clojure/test/check/random.cljs","^J",34,"^V",["^R",[["^2@","^2A"]]],"^W",null,"^X",["^R",[null,null]],"^H",1,"^Y",false,"^2>","^2?","^G",91,"^Z","^[","^I",91,"^10",2,"^11",true,"^Q",["^R",["^S",["^R",[["^2@","^2A"]]]]],"^21",null,"^15","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:returned","~:state","~:seed","^2A","^2@"]],"~:order",["^2@","^2A","^2I","^2H","^2G"]],"^15","Purely functional and splittable pseudo-random number generators."]